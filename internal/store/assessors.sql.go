// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: assessors.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const storeZoneTransferFinding = `-- name: StoreZoneTransferFinding :exec
INSERT INTO zone_transfer_findings (
    domain_id,
    ns_record_id,
    severity,
    status,
    nameserver,
    zone_transfer_possible,
    transfer_type,
    details
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8
         )
ON CONFLICT (domain_id, nameserver)
    DO UPDATE SET
                  ns_record_id = $2,
                  severity = $3,
                  status = $4,
                  zone_transfer_possible = $6,
                  transfer_type = $7,
                  details = $8
`

type StoreZoneTransferFindingParams struct {
	DomainID             pgtype.Int4     `json:"domain_id"`
	NsRecordID           pgtype.Int4     `json:"ns_record_id"`
	Severity             FindingSeverity `json:"severity"`
	Status               FindingStatus   `json:"status"`
	Nameserver           string          `json:"nameserver"`
	ZoneTransferPossible bool            `json:"zone_transfer_possible"`
	TransferType         TransferType    `json:"transfer_type"`
	Details              pgtype.Text     `json:"details"`
}

func (q *Queries) StoreZoneTransferFinding(ctx context.Context, arg StoreZoneTransferFindingParams) error {
	_, err := q.db.Exec(ctx, storeZoneTransferFinding,
		arg.DomainID,
		arg.NsRecordID,
		arg.Severity,
		arg.Status,
		arg.Nameserver,
		arg.ZoneTransferPossible,
		arg.TransferType,
		arg.Details,
	)
	return err
}
