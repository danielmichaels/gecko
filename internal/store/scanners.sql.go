// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: scanners.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const scannersGetZoneTransferAttempts = `-- name: ScannersGetZoneTransferAttempts :many
SELECT id,
       uid,
       domain_id,
       nameserver,
       transfer_type,
       was_successful,
       response_data,
       error_message,
       created_at,
       updated_at
FROM zone_transfer_attempts
WHERE domain_id = $1
ORDER BY updated_at DESC
`

func (q *Queries) ScannersGetZoneTransferAttempts(ctx context.Context, domainID pgtype.Int4) ([]ZoneTransferAttempts, error) {
	rows, err := q.db.Query(ctx, scannersGetZoneTransferAttempts, domainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ZoneTransferAttempts{}
	for rows.Next() {
		var i ZoneTransferAttempts
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.DomainID,
			&i.Nameserver,
			&i.TransferType,
			&i.WasSuccessful,
			&i.ResponseData,
			&i.ErrorMessage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const scannersStoreZoneTransferAttempt = `-- name: ScannersStoreZoneTransferAttempt :exec
INSERT INTO zone_transfer_attempts (domain_id,
                                    nameserver,
                                    transfer_type,
                                    was_successful,
                                    response_data,
                                    error_message)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (domain_id, nameserver)
    DO UPDATE SET transfer_type  = $3,
                  was_successful = $4,
                  response_data  = $5,
                  error_message  = $6,
                  updated_at     = NOW()
`

type ScannersStoreZoneTransferAttemptParams struct {
	DomainID      pgtype.Int4  `json:"domain_id"`
	Nameserver    string       `json:"nameserver"`
	TransferType  TransferType `json:"transfer_type"`
	WasSuccessful bool         `json:"was_successful"`
	ResponseData  pgtype.Text  `json:"response_data"`
	ErrorMessage  pgtype.Text  `json:"error_message"`
}

func (q *Queries) ScannersStoreZoneTransferAttempt(ctx context.Context, arg ScannersStoreZoneTransferAttemptParams) error {
	_, err := q.db.Exec(ctx, scannersStoreZoneTransferAttempt,
		arg.DomainID,
		arg.Nameserver,
		arg.TransferType,
		arg.WasSuccessful,
		arg.ResponseData,
		arg.ErrorMessage,
	)
	return err
}
