// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package store

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type DomainSource string

const (
	DomainSourceUserSupplied DomainSource = "user_supplied"
	DomainSourceDiscovered   DomainSource = "discovered"
)

func (e *DomainSource) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DomainSource(s)
	case string:
		*e = DomainSource(s)
	default:
		return fmt.Errorf("unsupported scan type for DomainSource: %T", src)
	}
	return nil
}

type NullDomainSource struct {
	DomainSource DomainSource `json:"domain_source"`
	Valid        bool         `json:"valid"` // Valid is true if DomainSource is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDomainSource) Scan(value interface{}) error {
	if value == nil {
		ns.DomainSource, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DomainSource.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDomainSource) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DomainSource), nil
}

type DomainStatus string

const (
	DomainStatusActive   DomainStatus = "active"
	DomainStatusInactive DomainStatus = "inactive"
	DomainStatusPending  DomainStatus = "pending"
)

func (e *DomainStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DomainStatus(s)
	case string:
		*e = DomainStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DomainStatus: %T", src)
	}
	return nil
}

type NullDomainStatus struct {
	DomainStatus DomainStatus `json:"domain_status"`
	Valid        bool         `json:"valid"` // Valid is true if DomainStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDomainStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DomainStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DomainStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDomainStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DomainStatus), nil
}

type DomainType string

const (
	DomainTypeTld       DomainType = "tld"
	DomainTypeSubdomain DomainType = "subdomain"
	DomainTypeWildcard  DomainType = "wildcard"
	DomainTypeOld       DomainType = "old"
	DomainTypeOther     DomainType = "other"
)

func (e *DomainType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DomainType(s)
	case string:
		*e = DomainType(s)
	default:
		return fmt.Errorf("unsupported scan type for DomainType: %T", src)
	}
	return nil
}

type NullDomainType struct {
	DomainType DomainType `json:"domain_type"`
	Valid      bool       `json:"valid"` // Valid is true if DomainType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDomainType) Scan(value interface{}) error {
	if value == nil {
		ns.DomainType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DomainType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDomainType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DomainType), nil
}

type FindingSeverity string

const (
	FindingSeverityCritical FindingSeverity = "critical"
	FindingSeverityHigh     FindingSeverity = "high"
	FindingSeverityMedium   FindingSeverity = "medium"
	FindingSeverityLow      FindingSeverity = "low"
	FindingSeverityInfo     FindingSeverity = "info"
	FindingSeverityIgnore   FindingSeverity = "ignore"
)

func (e *FindingSeverity) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FindingSeverity(s)
	case string:
		*e = FindingSeverity(s)
	default:
		return fmt.Errorf("unsupported scan type for FindingSeverity: %T", src)
	}
	return nil
}

type NullFindingSeverity struct {
	FindingSeverity FindingSeverity `json:"finding_severity"`
	Valid           bool            `json:"valid"` // Valid is true if FindingSeverity is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFindingSeverity) Scan(value interface{}) error {
	if value == nil {
		ns.FindingSeverity, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FindingSeverity.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFindingSeverity) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FindingSeverity), nil
}

type FindingStatus string

const (
	FindingStatusOpen          FindingStatus = "open"
	FindingStatusClosed        FindingStatus = "closed"
	FindingStatusCompliant     FindingStatus = "compliant"
	FindingStatusResolved      FindingStatus = "resolved"
	FindingStatusIgnore        FindingStatus = "ignore"
	FindingStatusNotApplicable FindingStatus = "not_applicable"
)

func (e *FindingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FindingStatus(s)
	case string:
		*e = FindingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for FindingStatus: %T", src)
	}
	return nil
}

type NullFindingStatus struct {
	FindingStatus FindingStatus `json:"finding_status"`
	Valid         bool          `json:"valid"` // Valid is true if FindingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFindingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.FindingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FindingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFindingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FindingStatus), nil
}

type TransferType string

const (
	TransferTypeAXFR     TransferType = "AXFR"
	TransferTypeIXFR     TransferType = "IXFR"
	TransferTypeAXFRIXFR TransferType = "AXFR+IXFR"
)

func (e *TransferType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransferType(s)
	case string:
		*e = TransferType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransferType: %T", src)
	}
	return nil
}

type NullTransferType struct {
	TransferType TransferType `json:"transfer_type"`
	Valid        bool         `json:"valid"` // Valid is true if TransferType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransferType) Scan(value interface{}) error {
	if value == nil {
		ns.TransferType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransferType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransferType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransferType), nil
}

type UserRole string

const (
	UserRoleOwner      UserRole = "owner"
	UserRoleManager    UserRole = "manager"
	UserRoleViewer     UserRole = "viewer"
	UserRoleSuperadmin UserRole = "superadmin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type UserStatus string

const (
	UserStatusActive   UserStatus = "active"
	UserStatusInactive UserStatus = "inactive"
	UserStatusPending  UserStatus = "pending"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus `json:"user_status"`
	Valid      bool       `json:"valid"` // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type ARecords struct {
	ID          int32              `json:"id"`
	Uid         string             `json:"uid"`
	DomainID    pgtype.Int4        `json:"domain_id"`
	Ipv4Address string             `json:"ipv4_address"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type ARecordsHistory struct {
	ID          int32              `json:"id"`
	RecordID    pgtype.Int4        `json:"record_id"`
	Ipv4Address string             `json:"ipv4_address"`
	ChangeType  string             `json:"change_type"`
	ChangedAt   pgtype.Timestamptz `json:"changed_at"`
}

type AaaaRecords struct {
	ID          int32              `json:"id"`
	Uid         string             `json:"uid"`
	DomainID    pgtype.Int4        `json:"domain_id"`
	Ipv6Address string             `json:"ipv6_address"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type AaaaRecordsHistory struct {
	ID          int32              `json:"id"`
	RecordID    pgtype.Int4        `json:"record_id"`
	Ipv6Address string             `json:"ipv6_address"`
	ChangeType  string             `json:"change_type"`
	ChangedAt   pgtype.Timestamptz `json:"changed_at"`
}

type CaaComplianceFindings struct {
	ID           int32              `json:"id"`
	Uid          string             `json:"uid"`
	DomainID     pgtype.Int4        `json:"domain_id"`
	CaaRecordID  pgtype.Int4        `json:"caa_record_id"`
	Severity     FindingSeverity    `json:"severity"`
	Status       FindingStatus      `json:"status"`
	IssueType    string             `json:"issue_type"`
	StandardName pgtype.Text        `json:"standard_name"`
	Details      pgtype.Text        `json:"details"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

type CaaComplianceFindingsHistory struct {
	ID           int32              `json:"id"`
	RecordID     pgtype.Int4        `json:"record_id"`
	Severity     FindingSeverity    `json:"severity"`
	Status       FindingStatus      `json:"status"`
	IssueType    string             `json:"issue_type"`
	StandardName pgtype.Text        `json:"standard_name"`
	Details      pgtype.Text        `json:"details"`
	ChangeType   string             `json:"change_type"`
	ChangedAt    pgtype.Timestamptz `json:"changed_at"`
}

type CaaConfigurationFindings struct {
	ID          int32              `json:"id"`
	Uid         string             `json:"uid"`
	DomainID    pgtype.Int4        `json:"domain_id"`
	CaaRecordID pgtype.Int4        `json:"caa_record_id"`
	Severity    FindingSeverity    `json:"severity"`
	Status      FindingStatus      `json:"status"`
	IssueType   string             `json:"issue_type"`
	Details     pgtype.Text        `json:"details"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type CaaConfigurationFindingsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	Severity   FindingSeverity    `json:"severity"`
	Status     FindingStatus      `json:"status"`
	IssueType  string             `json:"issue_type"`
	Details    pgtype.Text        `json:"details"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type CaaRecords struct {
	ID        int32              `json:"id"`
	Uid       string             `json:"uid"`
	DomainID  pgtype.Int4        `json:"domain_id"`
	Flags     int32              `json:"flags"`
	Tag       string             `json:"tag"`
	Value     string             `json:"value"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type CaaRecordsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	Flags      int32              `json:"flags"`
	Tag        string             `json:"tag"`
	Value      string             `json:"value"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type Certificates struct {
	ID            int32              `json:"id"`
	Uid           string             `json:"uid"`
	DomainID      pgtype.Int4        `json:"domain_id"`
	NotBefore     pgtype.Timestamptz `json:"not_before"`
	NotAfter      pgtype.Timestamptz `json:"not_after"`
	Issuer        string             `json:"issuer"`
	IssuerOrgName pgtype.Text        `json:"issuer_org_name"`
	IssuerCountry pgtype.Text        `json:"issuer_country"`
	Subject       string             `json:"subject"`
	KeyAlgorithm  string             `json:"key_algorithm"`
	KeyStrength   int32              `json:"key_strength"`
	Sans          []string           `json:"sans"`
	DnsNames      []string           `json:"dns_names"`
	IsCa          bool               `json:"is_ca"`
	IssuerCertUrl []string           `json:"issuer_cert_url"`
	CipherSuite   string             `json:"cipher_suite"`
	TlsVersion    string             `json:"tls_version"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
}

type CertificatesHistory struct {
	ID            int32              `json:"id"`
	RecordID      pgtype.Int4        `json:"record_id"`
	NotBefore     pgtype.Timestamptz `json:"not_before"`
	NotAfter      pgtype.Timestamptz `json:"not_after"`
	Issuer        string             `json:"issuer"`
	IssuerOrgName pgtype.Text        `json:"issuer_org_name"`
	IssuerCountry pgtype.Text        `json:"issuer_country"`
	Subject       string             `json:"subject"`
	KeyAlgorithm  string             `json:"key_algorithm"`
	KeyStrength   int32              `json:"key_strength"`
	Sans          []string           `json:"sans"`
	DnsNames      []string           `json:"dns_names"`
	IsCa          bool               `json:"is_ca"`
	IssuerCertUrl []string           `json:"issuer_cert_url"`
	CipherSuite   string             `json:"cipher_suite"`
	TlsVersion    string             `json:"tls_version"`
	ChangeType    string             `json:"change_type"`
	ChangedAt     pgtype.Timestamptz `json:"changed_at"`
}

type CnameRecords struct {
	ID        int32              `json:"id"`
	Uid       string             `json:"uid"`
	DomainID  pgtype.Int4        `json:"domain_id"`
	Target    string             `json:"target"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type CnameRecordsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	Target     string             `json:"target"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type CnameRedirectionFindings struct {
	ID            int32              `json:"id"`
	Uid           string             `json:"uid"`
	DomainID      pgtype.Int4        `json:"domain_id"`
	CnameRecordID pgtype.Int4        `json:"cname_record_id"`
	Severity      FindingSeverity    `json:"severity"`
	Status        FindingStatus      `json:"status"`
	IssueType     string             `json:"issue_type"`
	ChainLength   pgtype.Int4        `json:"chain_length"`
	Details       pgtype.Text        `json:"details"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
}

type CnameRedirectionFindingsHistory struct {
	ID          int32              `json:"id"`
	RecordID    pgtype.Int4        `json:"record_id"`
	Severity    FindingSeverity    `json:"severity"`
	Status      FindingStatus      `json:"status"`
	IssueType   string             `json:"issue_type"`
	ChainLength pgtype.Int4        `json:"chain_length"`
	Details     pgtype.Text        `json:"details"`
	ChangeType  string             `json:"change_type"`
	ChangedAt   pgtype.Timestamptz `json:"changed_at"`
}

type DanglingCnameFindings struct {
	ID               int32              `json:"id"`
	Uid              string             `json:"uid"`
	DomainID         pgtype.Int4        `json:"domain_id"`
	Severity         FindingSeverity    `json:"severity"`
	Status           FindingStatus      `json:"status"`
	TargetDomain     string             `json:"target_domain"`
	ServiceProvider  pgtype.Text        `json:"service_provider"`
	TakeoverPossible bool               `json:"takeover_possible"`
	Details          pgtype.Text        `json:"details"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

type DanglingCnameFindingsHistory struct {
	ID               int32              `json:"id"`
	RecordID         pgtype.Int4        `json:"record_id"`
	Severity         FindingSeverity    `json:"severity"`
	Status           FindingStatus      `json:"status"`
	TargetDomain     string             `json:"target_domain"`
	ServiceProvider  pgtype.Text        `json:"service_provider"`
	TakeoverPossible bool               `json:"takeover_possible"`
	Details          pgtype.Text        `json:"details"`
	ChangeType       string             `json:"change_type"`
	ChangedAt        pgtype.Timestamptz `json:"changed_at"`
}

type DkimFindings struct {
	ID          int32              `json:"id"`
	Uid         string             `json:"uid"`
	DomainID    pgtype.Int4        `json:"domain_id"`
	TxtRecordID pgtype.Int4        `json:"txt_record_id"`
	Severity    FindingSeverity    `json:"severity"`
	Status      FindingStatus      `json:"status"`
	Selector    pgtype.Text        `json:"selector"`
	IssueType   string             `json:"issue_type"`
	Details     pgtype.Text        `json:"details"`
	DkimValue   pgtype.Text        `json:"dkim_value"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type DkimFindingsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	Severity   FindingSeverity    `json:"severity"`
	Status     FindingStatus      `json:"status"`
	Selector   pgtype.Text        `json:"selector"`
	IssueType  string             `json:"issue_type"`
	Details    pgtype.Text        `json:"details"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type DmarcFindings struct {
	ID          int32              `json:"id"`
	Uid         string             `json:"uid"`
	DomainID    pgtype.Int4        `json:"domain_id"`
	TxtRecordID pgtype.Int4        `json:"txt_record_id"`
	Severity    FindingSeverity    `json:"severity"`
	Status      FindingStatus      `json:"status"`
	Policy      pgtype.Text        `json:"policy"`
	IssueType   string             `json:"issue_type"`
	Details     pgtype.Text        `json:"details"`
	DmarcValue  pgtype.Text        `json:"dmarc_value"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type DmarcFindingsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	Severity   FindingSeverity    `json:"severity"`
	Status     FindingStatus      `json:"status"`
	Policy     pgtype.Text        `json:"policy"`
	IssueType  string             `json:"issue_type"`
	Details    pgtype.Text        `json:"details"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type DnsResolutionConsistencyFindings struct {
	ID              int32              `json:"id"`
	Uid             string             `json:"uid"`
	DomainID        pgtype.Int4        `json:"domain_id"`
	Severity        FindingSeverity    `json:"severity"`
	Status          FindingStatus      `json:"status"`
	RecordType      string             `json:"record_type"`
	Resolver1       string             `json:"resolver1"`
	Resolver1Result pgtype.Text        `json:"resolver1_result"`
	Resolver2       string             `json:"resolver2"`
	Resolver2Result pgtype.Text        `json:"resolver2_result"`
	Details         pgtype.Text        `json:"details"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
}

type DnsResolutionConsistencyFindingsHistory struct {
	ID              int32              `json:"id"`
	RecordID        pgtype.Int4        `json:"record_id"`
	Severity        FindingSeverity    `json:"severity"`
	Status          FindingStatus      `json:"status"`
	RecordType      string             `json:"record_type"`
	Resolver1       string             `json:"resolver1"`
	Resolver1Result pgtype.Text        `json:"resolver1_result"`
	Resolver2       string             `json:"resolver2"`
	Resolver2Result pgtype.Text        `json:"resolver2_result"`
	Details         pgtype.Text        `json:"details"`
	ChangeType      string             `json:"change_type"`
	ChangedAt       pgtype.Timestamptz `json:"changed_at"`
}

type DnsResolutionLatencyFindings struct {
	ID          int32              `json:"id"`
	Uid         string             `json:"uid"`
	DomainID    pgtype.Int4        `json:"domain_id"`
	Severity    FindingSeverity    `json:"severity"`
	Status      FindingStatus      `json:"status"`
	RecordType  string             `json:"record_type"`
	Resolver    string             `json:"resolver"`
	LatencyMs   int32              `json:"latency_ms"`
	ThresholdMs int32              `json:"threshold_ms"`
	Details     pgtype.Text        `json:"details"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type DnsResolutionLatencyFindingsHistory struct {
	ID          int32              `json:"id"`
	RecordID    pgtype.Int4        `json:"record_id"`
	Severity    FindingSeverity    `json:"severity"`
	Status      FindingStatus      `json:"status"`
	RecordType  string             `json:"record_type"`
	Resolver    string             `json:"resolver"`
	LatencyMs   int32              `json:"latency_ms"`
	ThresholdMs int32              `json:"threshold_ms"`
	Details     pgtype.Text        `json:"details"`
	ChangeType  string             `json:"change_type"`
	ChangedAt   pgtype.Timestamptz `json:"changed_at"`
}

type DnskeyRecords struct {
	ID        int32              `json:"id"`
	Uid       string             `json:"uid"`
	DomainID  pgtype.Int4        `json:"domain_id"`
	PublicKey string             `json:"public_key"`
	Flags     int32              `json:"flags"`
	Protocol  int32              `json:"protocol"`
	Algorithm int32              `json:"algorithm"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type DnskeyRecordsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	PublicKey  string             `json:"public_key"`
	Flags      int32              `json:"flags"`
	Protocol   int32              `json:"protocol"`
	Algorithm  int32              `json:"algorithm"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type DnssecComplianceFindings struct {
	ID           int32              `json:"id"`
	Uid          string             `json:"uid"`
	DomainID     pgtype.Int4        `json:"domain_id"`
	Severity     FindingSeverity    `json:"severity"`
	Status       FindingStatus      `json:"status"`
	IssueType    string             `json:"issue_type"`
	StandardName pgtype.Text        `json:"standard_name"`
	Details      pgtype.Text        `json:"details"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

type DnssecComplianceFindingsHistory struct {
	ID           int32              `json:"id"`
	RecordID     pgtype.Int4        `json:"record_id"`
	Severity     FindingSeverity    `json:"severity"`
	Status       FindingStatus      `json:"status"`
	IssueType    string             `json:"issue_type"`
	StandardName pgtype.Text        `json:"standard_name"`
	Details      pgtype.Text        `json:"details"`
	ChangeType   string             `json:"change_type"`
	ChangedAt    pgtype.Timestamptz `json:"changed_at"`
}

type DnssecFindings struct {
	ID             int32              `json:"id"`
	Uid            string             `json:"uid"`
	DomainID       pgtype.Int4        `json:"domain_id"`
	DnskeyRecordID pgtype.Int4        `json:"dnskey_record_id"`
	DsRecordID     pgtype.Int4        `json:"ds_record_id"`
	Severity       FindingSeverity    `json:"severity"`
	Status         FindingStatus      `json:"status"`
	IssueType      string             `json:"issue_type"`
	Details        pgtype.Text        `json:"details"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

type DnssecFindingsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	Severity   FindingSeverity    `json:"severity"`
	Status     FindingStatus      `json:"status"`
	IssueType  string             `json:"issue_type"`
	Details    pgtype.Text        `json:"details"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type Domains struct {
	ID             int32              `json:"id"`
	Uid            string             `json:"uid"`
	TenantID       pgtype.Int4        `json:"tenant_id"`
	Name           string             `json:"name"`
	DomainType     DomainType         `json:"domain_type"`
	Source         DomainSource       `json:"source"`
	Status         DomainStatus       `json:"status"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	ParentDomainID pgtype.Int4        `json:"parent_domain_id"`
}

type DsRecords struct {
	ID         int32              `json:"id"`
	Uid        string             `json:"uid"`
	DomainID   pgtype.Int4        `json:"domain_id"`
	KeyTag     int32              `json:"key_tag"`
	Algorithm  int32              `json:"algorithm"`
	DigestType int32              `json:"digest_type"`
	Digest     string             `json:"digest"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type DsRecordsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	KeyTag     int32              `json:"key_tag"`
	Algorithm  int32              `json:"algorithm"`
	DigestType int32              `json:"digest_type"`
	Digest     string             `json:"digest"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type EmailAuthComplianceFindings struct {
	ID           int32              `json:"id"`
	Uid          string             `json:"uid"`
	DomainID     pgtype.Int4        `json:"domain_id"`
	TxtRecordID  pgtype.Int4        `json:"txt_record_id"`
	Severity     FindingSeverity    `json:"severity"`
	Status       FindingStatus      `json:"status"`
	AuthType     string             `json:"auth_type"`
	IssueType    string             `json:"issue_type"`
	StandardName pgtype.Text        `json:"standard_name"`
	Details      pgtype.Text        `json:"details"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

type EmailAuthComplianceFindingsHistory struct {
	ID           int32              `json:"id"`
	RecordID     pgtype.Int4        `json:"record_id"`
	Severity     FindingSeverity    `json:"severity"`
	Status       FindingStatus      `json:"status"`
	AuthType     string             `json:"auth_type"`
	IssueType    string             `json:"issue_type"`
	StandardName pgtype.Text        `json:"standard_name"`
	Details      pgtype.Text        `json:"details"`
	ChangeType   string             `json:"change_type"`
	ChangedAt    pgtype.Timestamptz `json:"changed_at"`
}

type MinimumRecordSetFindings struct {
	ID                int32              `json:"id"`
	Uid               string             `json:"uid"`
	DomainID          pgtype.Int4        `json:"domain_id"`
	Severity          FindingSeverity    `json:"severity"`
	Status            FindingStatus      `json:"status"`
	IssueType         string             `json:"issue_type"`
	MissingRecordType string             `json:"missing_record_type"`
	Details           pgtype.Text        `json:"details"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
}

type MinimumRecordSetFindingsHistory struct {
	ID                int32              `json:"id"`
	RecordID          pgtype.Int4        `json:"record_id"`
	Severity          FindingSeverity    `json:"severity"`
	Status            FindingStatus      `json:"status"`
	IssueType         string             `json:"issue_type"`
	MissingRecordType string             `json:"missing_record_type"`
	Details           pgtype.Text        `json:"details"`
	ChangeType        string             `json:"change_type"`
	ChangedAt         pgtype.Timestamptz `json:"changed_at"`
}

type MxRecords struct {
	ID         int32              `json:"id"`
	Uid        string             `json:"uid"`
	DomainID   pgtype.Int4        `json:"domain_id"`
	Preference int32              `json:"preference"`
	Target     string             `json:"target"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type MxRecordsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	Preference int32              `json:"preference"`
	Target     string             `json:"target"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type NameserverReachabilityFindings struct {
	ID             int32              `json:"id"`
	Uid            string             `json:"uid"`
	DomainID       pgtype.Int4        `json:"domain_id"`
	NsRecordID     pgtype.Int4        `json:"ns_record_id"`
	Severity       FindingSeverity    `json:"severity"`
	Status         FindingStatus      `json:"status"`
	Nameserver     string             `json:"nameserver"`
	IssueType      string             `json:"issue_type"`
	ResponseTimeMs pgtype.Int4        `json:"response_time_ms"`
	Details        pgtype.Text        `json:"details"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

type NameserverReachabilityFindingsHistory struct {
	ID             int32              `json:"id"`
	RecordID       pgtype.Int4        `json:"record_id"`
	Severity       FindingSeverity    `json:"severity"`
	Status         FindingStatus      `json:"status"`
	Nameserver     string             `json:"nameserver"`
	IssueType      string             `json:"issue_type"`
	ResponseTimeMs pgtype.Int4        `json:"response_time_ms"`
	Details        pgtype.Text        `json:"details"`
	ChangeType     string             `json:"change_type"`
	ChangedAt      pgtype.Timestamptz `json:"changed_at"`
}

type NameserverRedundancyFindings struct {
	ID               int32              `json:"id"`
	Uid              string             `json:"uid"`
	DomainID         pgtype.Int4        `json:"domain_id"`
	Severity         FindingSeverity    `json:"severity"`
	Status           FindingStatus      `json:"status"`
	IssueType        string             `json:"issue_type"`
	NameserverCount  int32              `json:"nameserver_count"`
	RecommendedCount int32              `json:"recommended_count"`
	Details          pgtype.Text        `json:"details"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

type NameserverRedundancyFindingsHistory struct {
	ID               int32              `json:"id"`
	RecordID         pgtype.Int4        `json:"record_id"`
	Severity         FindingSeverity    `json:"severity"`
	Status           FindingStatus      `json:"status"`
	IssueType        string             `json:"issue_type"`
	NameserverCount  int32              `json:"nameserver_count"`
	RecommendedCount int32              `json:"recommended_count"`
	Details          pgtype.Text        `json:"details"`
	ChangeType       string             `json:"change_type"`
	ChangedAt        pgtype.Timestamptz `json:"changed_at"`
}

type NsConfigurationFindings struct {
	ID         int32              `json:"id"`
	Uid        string             `json:"uid"`
	DomainID   pgtype.Int4        `json:"domain_id"`
	NsRecordID pgtype.Int4        `json:"ns_record_id"`
	Severity   FindingSeverity    `json:"severity"`
	Status     FindingStatus      `json:"status"`
	IssueType  string             `json:"issue_type"`
	Nameserver string             `json:"nameserver"`
	Details    pgtype.Text        `json:"details"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type NsConfigurationFindingsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	Severity   FindingSeverity    `json:"severity"`
	Status     FindingStatus      `json:"status"`
	IssueType  string             `json:"issue_type"`
	Nameserver string             `json:"nameserver"`
	Details    pgtype.Text        `json:"details"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type NsRecords struct {
	ID         int32              `json:"id"`
	Uid        string             `json:"uid"`
	DomainID   pgtype.Int4        `json:"domain_id"`
	Nameserver string             `json:"nameserver"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type NsRecordsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	Nameserver string             `json:"nameserver"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type OpenPortFindings struct {
	ID           int32              `json:"id"`
	Uid          string             `json:"uid"`
	DomainID     pgtype.Int4        `json:"domain_id"`
	ARecordID    pgtype.Int4        `json:"a_record_id"`
	AaaaRecordID pgtype.Int4        `json:"aaaa_record_id"`
	Severity     FindingSeverity    `json:"severity"`
	Status       FindingStatus      `json:"status"`
	IpAddress    string             `json:"ip_address"`
	Port         int32              `json:"port"`
	Service      pgtype.Text        `json:"service"`
	IssueType    string             `json:"issue_type"`
	Details      pgtype.Text        `json:"details"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

type OpenPortFindingsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	Severity   FindingSeverity    `json:"severity"`
	Status     FindingStatus      `json:"status"`
	IpAddress  string             `json:"ip_address"`
	Port       int32              `json:"port"`
	Service    pgtype.Text        `json:"service"`
	IssueType  string             `json:"issue_type"`
	Details    pgtype.Text        `json:"details"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type PtrRecords struct {
	ID        int32              `json:"id"`
	Uid       string             `json:"uid"`
	DomainID  pgtype.Int4        `json:"domain_id"`
	Target    string             `json:"target"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type PtrRecordsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	Target     string             `json:"target"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type RrsigRecords struct {
	ID          int32              `json:"id"`
	Uid         string             `json:"uid"`
	DomainID    pgtype.Int4        `json:"domain_id"`
	TypeCovered int32              `json:"type_covered"`
	Algorithm   int32              `json:"algorithm"`
	Labels      int32              `json:"labels"`
	OriginalTtl int32              `json:"original_ttl"`
	Expiration  int32              `json:"expiration"`
	Inception   int32              `json:"inception"`
	KeyTag      int32              `json:"key_tag"`
	SignerName  string             `json:"signer_name"`
	Signature   string             `json:"signature"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type RrsigRecordsHistory struct {
	ID          int32              `json:"id"`
	RecordID    pgtype.Int4        `json:"record_id"`
	TypeCovered int32              `json:"type_covered"`
	Algorithm   int32              `json:"algorithm"`
	Labels      int32              `json:"labels"`
	OriginalTtl int32              `json:"original_ttl"`
	Expiration  int32              `json:"expiration"`
	Inception   int32              `json:"inception"`
	KeyTag      int32              `json:"key_tag"`
	SignerName  string             `json:"signer_name"`
	Signature   string             `json:"signature"`
	ChangeType  string             `json:"change_type"`
	ChangedAt   pgtype.Timestamptz `json:"changed_at"`
}

type SoaRecords struct {
	ID         int32              `json:"id"`
	Uid        string             `json:"uid"`
	DomainID   pgtype.Int4        `json:"domain_id"`
	Nameserver string             `json:"nameserver"`
	Email      string             `json:"email"`
	Serial     int64              `json:"serial"`
	Refresh    int32              `json:"refresh"`
	Retry      int32              `json:"retry"`
	Expire     int32              `json:"expire"`
	MinimumTtl int32              `json:"minimum_ttl"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type SoaRecordsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	Nameserver string             `json:"nameserver"`
	Email      string             `json:"email"`
	Serial     int64              `json:"serial"`
	Refresh    int32              `json:"refresh"`
	Retry      int32              `json:"retry"`
	Expire     int32              `json:"expire"`
	MinimumTtl int32              `json:"minimum_ttl"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type SpfFindings struct {
	ID          int32              `json:"id"`
	Uid         string             `json:"uid"`
	DomainID    pgtype.Int4        `json:"domain_id"`
	TxtRecordID pgtype.Int4        `json:"txt_record_id"`
	Severity    FindingSeverity    `json:"severity"`
	Status      FindingStatus      `json:"status"`
	IssueType   string             `json:"issue_type"`
	SpfValue    pgtype.Text        `json:"spf_value"`
	Details     pgtype.Text        `json:"details"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type SpfFindingsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	Severity   FindingSeverity    `json:"severity"`
	Status     FindingStatus      `json:"status"`
	IssueType  string             `json:"issue_type"`
	SpfValue   pgtype.Text        `json:"spf_value"`
	Details    pgtype.Text        `json:"details"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type SrvRecords struct {
	ID        int32              `json:"id"`
	Uid       string             `json:"uid"`
	DomainID  pgtype.Int4        `json:"domain_id"`
	Target    string             `json:"target"`
	Port      int32              `json:"port"`
	Weight    int32              `json:"weight"`
	Priority  int32              `json:"priority"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type SrvRecordsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	Target     string             `json:"target"`
	Port       int32              `json:"port"`
	Weight     int32              `json:"weight"`
	Priority   int32              `json:"priority"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type Tenants struct {
	ID        int32              `json:"id"`
	Uid       string             `json:"uid"`
	Name      string             `json:"name"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type TxtRecords struct {
	ID        int32              `json:"id"`
	Uid       string             `json:"uid"`
	DomainID  pgtype.Int4        `json:"domain_id"`
	Value     string             `json:"value"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type TxtRecordsHistory struct {
	ID         int32              `json:"id"`
	RecordID   pgtype.Int4        `json:"record_id"`
	Value      string             `json:"value"`
	ChangeType string             `json:"change_type"`
	ChangedAt  pgtype.Timestamptz `json:"changed_at"`
}

type Users struct {
	ID        int32              `json:"id"`
	Uid       string             `json:"uid"`
	TenantID  pgtype.Int4        `json:"tenant_id"`
	Email     string             `json:"email"`
	Name      pgtype.Text        `json:"name"`
	Role      UserRole           `json:"role"`
	Status    string             `json:"status"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type ZoneTransferAttempts struct {
	ID            int32              `json:"id"`
	Uid           string             `json:"uid"`
	DomainID      pgtype.Int4        `json:"domain_id"`
	Nameserver    string             `json:"nameserver"`
	TransferType  TransferType       `json:"transfer_type"`
	WasSuccessful bool               `json:"was_successful"`
	ResponseData  []byte             `json:"response_data"`
	ErrorMessage  pgtype.Text        `json:"error_message"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
}

type ZoneTransferAttemptsHistory struct {
	ID            int32              `json:"id"`
	RecordID      pgtype.Int4        `json:"record_id"`
	Nameserver    string             `json:"nameserver"`
	TransferType  string             `json:"transfer_type"`
	WasSuccessful bool               `json:"was_successful"`
	ResponseData  []byte             `json:"response_data"`
	ErrorMessage  pgtype.Text        `json:"error_message"`
	ChangeType    string             `json:"change_type"`
	ChangedAt     pgtype.Timestamptz `json:"changed_at"`
}

type ZoneTransferFindings struct {
	ID                   int32              `json:"id"`
	Uid                  string             `json:"uid"`
	DomainID             pgtype.Int4        `json:"domain_id"`
	NsRecordID           pgtype.Int4        `json:"ns_record_id"`
	Severity             FindingSeverity    `json:"severity"`
	Status               FindingStatus      `json:"status"`
	Nameserver           string             `json:"nameserver"`
	ZoneTransferPossible bool               `json:"zone_transfer_possible"`
	TransferType         TransferType       `json:"transfer_type"`
	Details              pgtype.Text        `json:"details"`
	TransferDetails      []byte             `json:"transfer_details"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
}

type ZoneTransferFindingsHistory struct {
	ID                   int32              `json:"id"`
	RecordID             pgtype.Int4        `json:"record_id"`
	Severity             FindingSeverity    `json:"severity"`
	Status               FindingStatus      `json:"status"`
	Nameserver           string             `json:"nameserver"`
	ZoneTransferPossible bool               `json:"zone_transfer_possible"`
	TransferType         TransferType       `json:"transfer_type"`
	Details              pgtype.Text        `json:"details"`
	TransferDetails      []byte             `json:"transfer_details"`
	ChangeType           string             `json:"change_type"`
	ChangedAt            pgtype.Timestamptz `json:"changed_at"`
}
